R Data Frames

Data Frame
	…a list with class “data.frame”
Used for storing data tables
	= a list of vectors of = length
	One example in R is mtcars

> mtcars 
               mpg cyl disp  hp drat   wt ... 
Mazda RX4     21.0   6  160 110 3.90 2.62 ... 
Mazda RX4 Wag 21.0   6  160 110 3.90 2.88 ... 
Datsun 710    22.8   4  108  93 3.85 2.32 ... 

Header
Top row

Data Row
Each additional row

Cell
Each data member in the data frame

# build data frame
x <- c("A","B","C")
y <- c(1,2,3)
z <- c(101,202,303)

df <- data.frame(x,y,z, stringsAsFactors=FALSE)

# check data frame
head(df)
tail(df)

# confirm structure
str(df)

# view and/or edit data frame
View(df)
df <- edit(data.frame(df))
fix(df)

# add row or column
newColumn <- c(1.1,2.2,3.3,4.4)
	df2 <- cbind(df, newColumn)

newRow <- c("AA","BB","CC","DD")
	mydat <- rbind(mydat, newRow)
	
# describe data frame
nrow(mtcars)
ncol(mtcars)
str(mtcars)
names(mtcars)
summary(mtcars)
dim(mtcars)
is.data.frame(mtcars)

# count items within data frame
require(plyr)
count( df, dfcolumn)

# count combinations of items
require(plyr)
count( df, c("dfcolumn1", "dfcolumn2", "dfcolumn3")
	# like cartesian join
	
# reference values within data frame
	# By Coordinates
	mtcars[1, 2] 

	# By Row and Column Names
	mtcars["Mazda RX4", "cyl"] 

# data frame logical indexing
	mydat$x == "A"
	f <-mydat$x == "A"
	mydat[f]
	
	mydat$x %in% c("A","B")
	ss <- mydat$x %in% c("A","B")
	mydat[ss]

# manipulate data frame (basic)
	# Remove NA Values
		# complete.cases
		mydat <- mydat[complete.cases(mydat), ]
		
		# is.na
		
# rename columns in data frame
	# easiest with plyr
	require(plyr)
	rename(df, c("beta"="two", "gamma"="three"))

# managing duplicates in data frame
	require(Zelig)
		# create logical vector of duplicates
		d <- duplicated(df)
		
		# create a new data frame of only the duplicates
		d <- df[duplicated(df, ]
		
# sort / order data frame
	# order()
		# sort by descending order on x
		df[order(-x), ]
		
		# sort in randomized order
		df[order(runif(nrow(df))), ]